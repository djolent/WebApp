@model Microsoft.Azure.Batch.Blast.Storage.Entities.SearchEntity
@{
    ViewBag.Title = "Search - " + @Model.Name;
}

<p>&nbsp;</p>

<ol class="breadcrumb">
    <li><a href="/Searches">Searches</a></li>
    <li class="active">@Model.Name</li>
</ol>

<div class="panel panel-default">
    <div class="panel-heading clearfix">
        <h3 class="panel-title pull-left" style="padding-top: 7.5px;">Search '@Model.Name' Details</h3>
        <div class="btn-group pull-right">
            <a id="cancelBtn" href="#" class="btn btn-warning btn-sm">Cancel</a>
            <a id="deleteBtn" href="#" class="btn btn-danger btn-sm">Delete</a>
        </div>
    </div>
    <div class="panel-body">
        <form class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label">Name</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@Model.Name</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Executable</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@Model.Executable</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Arguments</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@(Model.ExecutableArgs ?? "")</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Database</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@Model.DatabaseId</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">State</label>
                <div class="col-sm-10">
                    <p id="searchState" class="form-control-static">@Model.State</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Pool</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@Model.PoolId</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Progress</label>
                <div class="col-sm-3">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                            0%
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">StartTime</label>
                <div class="col-sm-10">
                    <p id="searchStartTime" class="form-control-static"></p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">EndTime</label>
                <div class="col-sm-10">
                    <p id="searchEndTime" class="form-control-static"></p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Duration</label>
                <div class="col-sm-10">
                    <p id="searchDuration" class="form-control-static">@Model.Duration</p>
                </div>
            </div>
            <div id="searchErrorsDiv" class="form-group hidden">
                <label class="col-sm-2 control-label">Errors</label>
                <div class="col-sm-10">
                    <p id="searchErrors" class="form-control-static"></p>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="panel panel-default">
    <div class="panel-heading">Results</div>
    <table class="table" id="querytbl">
        <thead>
            <tr>
                <th>Query</th>
                <th>State</th>
                <th>StartTime</th>
                <th>EndTime</th>
                <th>Duration</th>
                <th>Outputs</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="resultTableBody"></tbody>
    </table>
    <progress></progress>
</div>

@section scripts
{
    <script id="query-template" type="text/x-handlebars-template">
        <tr>
            <td>{{queryFilename}}</td>
            <td>{{state}}</td>
            <td>{{startTimeFormatted}}</td>
            <td>{{endTimeFormatted}}</td>
            <td>{{duration}}</td>
            <td>{{{outputsHtml}}}</td>
            <td>
                {{#if visualize}}
                <a href="@Model.Id/{{id}}/visualize/{{filename}}/" role="button" class="btn btn-success btn-sm">Visualize</a>
                {{/if}}
            </td>
        </tr>
    </script>

    <script id="query-output-template" type="text/x-handlebars-template">
        <p><a href="{{url}}" target="_blank">{{filename}}</a></p>
    </script>

    <script>
        $(function() {

            if (!isInProgress('@Model.State')) {
                $('#cancelBtn').addClass('disabled');
            }

            $('#deleteBtn').click(function() {
                if (confirm("Are you sure you want to delete the search: @Model.Name?")) {
                    $.ajax({
                        type: 'DELETE',
                        url: '/api/searches/@Model.Id',
                        success: function() {
                            window.location.href = "/Searches";
                        },
                        error: function(response) {
                            console.error("Failed to delete: ", response);
                        }
                    });
                }
            });

            $('#cancelBtn').click(function() {
                if (confirm("Are you sure you want to cancel the search: @Model.Name?")) {
                    $.ajax({
                        type: 'POST',
                        url: '/api/searches/@Model.Id/actions/cancel',
                        success: function() {
                            location.reload(true);
                        },
                        error: function(response) {
                            console.error("Failed to delete: ", response);
                        }
                    });
                }
            });

            updateSearch();
            loadQueries();
        });

        function updateSearch() {

            console.log("loading search...");

            $.get('/api/searches/@Model.Id', null, function(search) {

                $('#searchState').text(search._State);
                $('#searchStartTime').text(formatDate(new Date(search.startTime)));
                $('#searchEndTime').text(formatDate(new Date(search.endTime)));
                $('#searchDuration').text(search.duration);

                var percent = 0;
                if (search.totalTasks !== undefined && search.completedTasks !== undefined) {
                    percent = Math.round((search.completedTasks / search.totalTasks) * 100);
                }

                $('.progress-bar').css('width', percent + '%').attr('aria-valuenow', percent);
                $('.progress-bar').text(percent + '%');

                if (percent === 100) {
                    $('.progress-bar').removeClass('active');
                }

                if (search.errors !== null && search.errors !== "") {
                    $('#searchErrors').text(search.errors);
                    $('#searchErrorsDiv').removeClass('hidden');
                }

                if (isInProgress(search._State)) {
                    setTimeout(updateSearch, 5000);
                }

            }).error(function(data) {
                if (data.status === 403) {
                    console.debug("Authentication error, reloading page to refresh token.");
                    window.location.reload(true);
                } else {
                    alert("Error getting search\nstatusCode=" + data.status + "\nresponseText=" + data.responseText);
                    console.error(data);
                    if (isInProgress(search._State)) {
                        setTimeout(updateSearch, 5000);
                    }
                }
            });
        }

        function loadQueries() {

            console.log("loading queries...");

            $.get('/api/searches/@Model.Id/queries', null, function(searchQueries) {

                $('progress').hide();

                var filenameRegex = /\.([0-9a-z]+)(?=[?#])|(\.)(?:[\w]+)$/;

                var html = "";

                $.map(searchQueries, function(query) {

                    var hasXmlOutput = false;
                    var resultsXmlFile = "";
                    var outputsHtml = "";

                    for (var i in query.outputs) {
                        var output = query.outputs[i];
                        var source = $("#query-output-template").html();
                        var template = Handlebars.compile(source);
                        var extension = output.filename.match(filenameRegex);

                        outputsHtml += template(output);

                        if (extension[0] === '.xml') {
                            resultsXmlFile = output.filename;
                            hasXmlOutput = true;
                        }
                    }

                    var source = $("#query-template").html();
                    var template = Handlebars.compile(source);

                    query['outputsHtml'] = outputsHtml;
                    query['startTimeFormatted'] = formatDate(new Date(query.startTime));
                    query['endTimeFormatted'] = formatDate(new Date(query.endTime));
                    query.visualize = hasXmlOutput;
                    query.filename = resultsXmlFile;

                    html += template(query);
                });

                $("#resultTableBody").empty();
                $('#resultTableBody').append(html);

                // Whether success or error, reload
                var searchState = $('#searchState').text();
                if (isInProgress(searchState)) {
                    setTimeout(loadQueries, 5000);
                }

            }).error(function(data) {
                if (data.status === 403) {
                    console.debug("Authentication error, reloading page to refresh token.");
                    window.location.reload(true);
                } else {
                    alert("Error getting search queries\nstatusCode=" + data.status + "\nresponseText=" + data.responseText);
                    console.error(data);

                    // Whether success or error, reload
                    var searchState = $('#searchState').text();
                    if (isInProgress(searchState)) {
                        setTimeout(loadQueries, 5000);
                    }
                }
            });
        }

        function isInProgress(searchState) {
            return searchState === null ||
                searchState === 'StagingData' ||
                searchState === 'WaitingForResources' ||
                searchState === 'DownloadingDatabase' ||
                searchState === 'Running';
        }
</script>
}
